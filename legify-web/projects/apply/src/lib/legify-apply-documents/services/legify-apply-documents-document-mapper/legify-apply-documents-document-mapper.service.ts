import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { LegifyDocumentRequirement, Person } from '../../../models';
import { LegifyDocument } from '../../models';

@Injectable()
export class LegifyApplyDocumentsDocumentMapperService {
  constructor() {}

  public convertRawFileToLegifyDocument(
    rawFile: File,
    documentOwner: Person,
    documentRequirementMeta: LegifyDocumentRequirement
  ): Observable<LegifyDocument> {
    return this.convertBlobToBase64String(rawFile).pipe(
      map((base64) => ({
        ownerId: documentOwner.id,
        // TODO: base64 should be cleaned up and not be included in the
        // meta information for the document when retrieving it from the BE.
        file: base64,
        fileType: this.getFileTypeFromRawFile(rawFile),
        // TODO: documentId should be generated by the backend,
        // mock the property for now
        documentId: Math.random().toString(36).substring(7),
        // TODO: backend should put in the value for the documentKey
        documentKey: '',
        filename: rawFile.name,
        forRole: documentOwner.role,
        uploadDate: new Date().toJSON(),
        documentType: documentRequirementMeta.documentType,
        documentGroup: documentRequirementMeta.documentGroup
      }))
    );
  }

  // TODO: put accepted file types in apply-config
  // then use those to filter out files during file uploads
  protected getFileTypeFromRawFile(rawFile: File): string {
    return rawFile.type.split('/')[0].trim();
  }

  protected convertBlobToBase64String(rawFile: File): Observable<string> {
    return new Observable<string>((subscriber) => {
      const fileReader = new FileReader();
      fileReader.addEventListener('load', () => {
        subscriber.next(fileReader.result as string);
        subscriber.complete();
      });

      fileReader.readAsDataURL(rawFile);
    });
  }
}
